/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */
package com.okutonda.okudpdv;

import com.formdev.flatlaf.FlatLightLaf;
import com.okutonda.okudpdv.data.config.HibernateConfig;
import com.okutonda.okudpdv.views.install.ScreenInstall;
import com.okutonda.okudpdv.views.login.ScreenLogin;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import com.okutonda.okudpdv.data.dao.GroupsProductDao;
import com.okutonda.okudpdv.data.dao.OptionsDao;
import com.okutonda.okudpdv.data.dao.TaxeDao;
import com.okutonda.okudpdv.data.dao.TaxeReasonDao;
import com.okutonda.okudpdv.data.dao.UserDao;
import com.okutonda.okudpdv.data.entities.Countries;
import com.okutonda.okudpdv.data.entities.GroupsProduct;
import com.okutonda.okudpdv.data.entities.Options;
import com.okutonda.okudpdv.data.entities.ReasonTaxes;
import com.okutonda.okudpdv.data.entities.Taxes;
import com.okutonda.okudpdv.data.entities.User;
import java.time.LocalDateTime;

public class Okudpdv {

    public static void main(String[] args) {
        System.out.println("Hello World!");

        // 1) Look & Feel
        try {
            FlatLightLaf.setup();
            com.okutonda.okudpdv.ui.TemaLookAndFeel.aplicarUIManagerBasico();
        } catch (Exception ex) {
            System.err.println("Erro no Look & Feel: " + ex.getMessage());
        }

        SwingUtilities.invokeLater(() -> {
            try {
                // üî• SIMPLIFICA√á√ÉO: Testa apenas se Hibernate funciona
                boolean hibernateOk = testHibernateConnection();

                if (hibernateOk) {
                    System.out.println("‚úÖ Sistema pronto - abrindo login");

                    // üî• INICIALIZA√á√ÉO AUTOM√ÅTICA: Sempre tenta carregar dados essenciais
                    initializeEssentialData();

                    new ScreenLogin().setVisible(true);
                } else {
                    // Se Hibernate falhar, tenta instala√ß√£o
                    JOptionPane.showMessageDialog(null,
                            "N√£o foi poss√≠vel conectar ao banco de dados.\nVerifique se o MySQL est√° rodando.",
                            "Erro de Conex√£o", JOptionPane.ERROR_MESSAGE);
                    new ScreenInstall().setVisible(true);
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,
                        "Erro inesperado: " + e.getMessage(),
                        "Erro Fatal", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
                System.exit(1);
            }
        });

        // Shutdown hook
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            HibernateConfig.shutdown();
        }));
    }

    private static boolean testHibernateConnection() {
        try {
            return HibernateConfig.testConnection();
        } catch (Exception e) {
            System.err.println("‚ùå Hibernate connection test failed: " + e.getMessage());
            return false;
        }
    }

    /**
     * üî• INICIALIZA√á√ÉO AUTOM√ÅTICA: Sempre tenta carregar/criar dados essenciais
     */
    private static boolean initializeEssentialData() {
        try {
            System.out.println("üîÑ Inicializando dados essenciais do sistema...");

            // 1. Carregar cache de pa√≠ses
            Countries.loadCache();
            System.out.println("‚úÖ Pa√≠ses carregados");

            // 2. Inicializar outras tabelas essenciais
            boolean usersInitialized = initializeUsers();
            boolean taxesInitialized = initializeTaxes();
            boolean reasonTaxesInitialized = initializeReasonTaxes(); // üî• NOVO
            boolean groupsInitialized = initializeProductGroups();
            boolean optionsInitialized = initializeSystemOptions();

            System.out.println("üìä Resumo da inicializa√ß√£o:");
            System.out.println("   - Users: " + (usersInitialized ? "‚úÖ" : "‚ö†Ô∏è"));
            System.out.println("   - Taxes: " + (taxesInitialized ? "‚úÖ" : "‚ö†Ô∏è"));
            System.out.println("   - Reason Taxes: " + (reasonTaxesInitialized ? "‚úÖ" : "‚ö†Ô∏è")); // üî• NOVO
            System.out.println("   - Product Groups: " + (groupsInitialized ? "‚úÖ" : "‚ö†Ô∏è"));
            System.out.println("   - System Options: " + (optionsInitialized ? "‚úÖ" : "‚ö†Ô∏è"));

            // Considera sucesso se os dados mais cr√≠ticos foram inicializados
            return usersInitialized && taxesInitialized && optionsInitialized;

        } catch (Exception e) {
            System.err.println("‚ùå Erro durante inicializa√ß√£o autom√°tica: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    private static boolean initializeUsers() {
        try {
            UserDao userDao = new UserDao();
            var users = userDao.findAll();

            if (users.isEmpty()) {
                System.out.println("üë§ Criando usu√°rio administrador...");
                User admin = new User();
                admin.setName("Administrador");
                admin.setEmail("admin@empresa.com");
                admin.setPassword("admin123");
                admin.setProfile("ADMIN");
                admin.setStatus(1);
                admin.setCreatedAt(LocalDateTime.now());
                userDao.save(admin);

                System.out.println("‚úÖ Usu√°rio administrador criado com sucesso");
                return true;
            }

            System.out.println("‚úÖ Usu√°rios j√° existem: " + users.size());
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao criar usu√°rio admin: " + e.getMessage());
            return false;
        }
    }

    private static boolean initializeTaxes() {
        try {
            // üî• CORRE√á√ÉO: Use TaxDao (singular) se for o nome correto
            TaxeDao taxDao = new TaxeDao(); // Ou TaxesDao, dependendo da sua classe
            var taxes = taxDao.findAll();

            if (taxes.isEmpty()) {
                System.out.println("üí∞ Criando impostos padr√£o...");

                // IVA 7% (mais comum em Angola atualmente)
                Taxes iva7 = new Taxes();
                iva7.setName("IVA 7%");
                iva7.setCode("IVA7");
                iva7.setPercentage(new java.math.BigDecimal("7.00"));
                iva7.setIsDefault(1); // üî• Padr√£o
                taxDao.save(iva7);

                // IVA 14% 
                Taxes iva14 = new Taxes();
                iva14.setName("IVA 14%");
                iva14.setCode("IVA14");
                iva14.setPercentage(new java.math.BigDecimal("14.00"));
                iva14.setIsDefault(0);
                taxDao.save(iva14);

                // Isento
                Taxes isento = new Taxes();
                isento.setName("Isento");
                isento.setCode("ISENTO");
                isento.setPercentage(java.math.BigDecimal.ZERO);
                isento.setIsDefault(0);
                taxDao.save(isento);

                System.out.println("‚úÖ 3 impostos padr√£o criados");
                return true;
            }
            System.out.println("‚úÖ Impostos j√° existem: " + taxes.size());
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao inicializar impostos: " + e.getMessage());
            return false;
        }
    }

    private static boolean initializeProductGroups() {
        try {
            // Usar seu GroupProductDao existente
            GroupsProductDao groupDao = new GroupsProductDao();
            var groups = groupDao.findAll();

            if (groups.isEmpty()) {
                System.out.println("üì¶ Criando grupos de produtos padr√£o...");

                GroupsProduct geral = new GroupsProduct();
                geral.setName("Geral");
                geral.setCode("GERAL");
                groupDao.save(geral);

                System.out.println("‚úÖ Grupos de produtos criados");
                return true;
            }
            System.out.println("‚úÖ Grupos de produtos j√° existem: " + groups.size());
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao inicializar grupos de produtos: " + e.getMessage());
            return false;
        }
    }

    private static boolean initializeReasonTaxes() {
        try {
            TaxeReasonDao reasonTaxDao = new TaxeReasonDao();
            var reasonTaxes = reasonTaxDao.findAll();

            if (reasonTaxes.isEmpty()) {
                System.out.println("üìã Criando motivos fiscais padr√£o de Angola...");

                // üîπ Dados dos motivos fiscais baseados na sua tabela
                String[][] reasonTaxData = {
                    // c√≥digo, motivo, padr√£o, descri√ß√£o
                    {"M00", "Regime transit√≥rio", "SAF-T", "Regime transit√≥rio"},
                    {"M02", "Transmiss√£o de bens e servi√ßo n√£o sujeita", "SAF-T", "Transmiss√£o de bens e servi√ßo n√£o sujeita"},
                    {"M04", "IVA ‚Äì Regime de n√£o sujei√ß√£o", "SAF-T", "IVA ‚Äì Regime de n√£o sujei√ß√£o"},
                    {"M10", "Isento nos termos da al√≠nea b) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Transmiss√£o de bens alimentares"},
                    {"M11", "Isento nos termos da al√≠nea b) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Transmiss√µes de medicamentos"},
                    {"M12", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Cadeiras de rodas e ve√≠culos especiais"},
                    {"M13", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Livros em formato digital ou f√≠sico"},
                    {"M14", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Loca√ß√£o de bens im√≥veis habitacionais"},
                    {"M15", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Opera√ß√µes sujeitas ao imposto de SISA"},
                    {"M16", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Explora√ß√£o de jogos de fortuna ou azar"},
                    {"M17", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Transporte colectivo de passageiros"},
                    {"M18", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Opera√ß√µes de intermedia√ß√£o financeira"},
                    {"M19", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Seguro de sa√∫de e presta√ß√£o de seguros"},
                    {"M20", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Transmiss√µes de produtos petrol√≠feros"},
                    {"M21", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Servi√ßos de ensino"},
                    {"M22", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Presta√ß√µes de servi√ßo m√©dico sanit√°rio"},
                    {"M23", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Transporte de doentes em ambul√¢ncias"},
                    {"M24", "Isento nos termos da al√≠nea c) do n¬∫1 do artigo 12", "CIVA", "Artigo 12.¬∫ do CIVA - Equipamentos m√©dicos"},
                    {"M30", "Isento nos termos da al√≠nea h) do artigo 15.¬∫ do CIVA", "CIVA", "Artigo 15.¬∫ do CIVA - Transmiss√µes de bens expedidos ou transportados"},
                    {"M31", "Isento nos termos da al√≠nea h) do artigo 15.¬∫ do CIVA", "CIVA", "Artigo 15.¬∫ do CIVA - Transmiss√µes de bens de abastecimento"},
                    {"NOR", "Normal", "SAF-T", "Regime normal de IVA"},
                    {"RET", "Reten√ß√£o na fonte", "SAF-T", "Sujeito a reten√ß√£o na fonte"},
                    {"ISE", "Isento", "SAF-T", "Isento de IVA"},
                    {"OUT", "Outro", "SAF-T", "Outro motivo fiscal"}
                };

                int createdCount = 0;
                for (String[] data : reasonTaxData) {
                    try {
                        // Verificar se j√° existe pelo c√≥digo
                        var existing = reasonTaxDao.findByCode(data[0]);
                        if (existing.isEmpty()) {
                            ReasonTaxes reasonTax = new ReasonTaxes();
                            reasonTax.setCode(data[0]);
                            reasonTax.setReason(data[1]);
                            reasonTax.setStandard(data[2]);
                            reasonTax.setDescription(data[3]);
                            reasonTaxDao.save(reasonTax);
                            createdCount++;
                        }
                    } catch (Exception e) {
                        System.err.println("‚ö†Ô∏è  Erro ao criar motivo fiscal " + data[0] + ": " + e.getMessage());
                    }
                }

                System.out.println("‚úÖ " + createdCount + " motivos fiscais criados");
                return true;
            }

            System.out.println("‚úÖ Motivos fiscais j√° existem: " + reasonTaxes.size());
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao inicializar motivos fiscais: " + e.getMessage());
            return false;
        }
    }

    private static boolean initializeSystemOptions() {
        try {
            // Usar seu OptionDao existente
            OptionsDao optionDao = new OptionsDao();

            // Configura√ß√µes essenciais
            String[][] essentialOptions = {
                {"companyName", "ACTIVE", "Minha Empresa"},
                {"companyNif", "ACTIVE", "000000000"},
                {"companyAddress", "ACTIVE", "Endere√ßo da empresa"},
                {"companyPhone", "ACTIVE", "+244 900 000 000"},
                {"companyEmail", "ACTIVE", "empresa@email.com"},
                {"systemCurrency", "ACTIVE", "AOA"}
            };

            int created = 0;
            for (String[] optionData : essentialOptions) {
                var existing = optionDao.findByName(optionData[0]);
                if (existing.isEmpty()) {
                    Options option = new Options();
                    option.setName(optionData[0]);
                    option.setStatus(optionData[1]);
                    option.setValue(optionData[2]);
                    optionDao.save(option);
                    created++;
                }
            }

            if (created > 0) {
                System.out.println("‚úÖ " + created + " op√ß√µes do sistema criadas");
            } else {
                System.out.println("‚úÖ Op√ß√µes do sistema j√° existem");
            }
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao inicializar op√ß√µes do sistema: " + e.getMessage());
            return false;
        }
    }
}

///**
// *
// * @author kenny
// */
//public class Okudpdv {
//
//    public static void main(String[] args) {
//        System.out.println("Hello World!");
//        Countries.loadCache();
//        // 1) Look & Feel (FlatLaf)
//        try {
//            FlatLightLaf.setup();
//        } catch (Exception ex) {
//            System.err.println("Falhou inicializar o Look & Feel FlatLaf: " + ex.getMessage());
//        }
//
//        // 2) Aplicar tema global
//        try {
//            com.okutonda.okudpdv.ui.TemaLookAndFeel.aplicarUIManagerBasico();
//        } catch (Exception ex) {
//            System.err.println("Falhou aplicar TemaLookAndFeel: " + ex.getMessage());
//        }
//
//        // Garante que a UI Swing inicia na thread de interface
//        SwingUtilities.invokeLater(() -> {
//            try {
//                // üîç Diagn√≥stico inicial do banco (SEU C√ìDIGO ATUAL)
//                DatabaseBootProbe.AppState state = DatabaseBootProbe.detect();
//                System.out.println("DEBUG ‚Üí Estado do BD: " + state);
//
//                switch (state) {
//                    case DB_UNREACHABLE -> {
//                        JOptionPane.showMessageDialog(null, "‚ùå N√£o foi poss√≠vel comunicar com o servidor de base de dados.", "Base de dados inativa", JOptionPane.ERROR_MESSAGE);
//                        new ScreenLogin().setVisible(true);
//                    }
//
//                    case DB_NOT_FOUND, SCHEMA_MISSING, INSTALL_INCOMPLETE -> {
//                        JOptionPane.showMessageDialog(null, "‚öôÔ∏è O sistema precisa ser instalado ou atualizado.", "Instala√ß√£o necess√°ria", JOptionPane.INFORMATION_MESSAGE);
//                        new ScreenInstall().setVisible(true);
//                    }
//
//                    case READY -> {
//                        // üî• NOVA VERIFICA√á√ÉO: Testar Hibernate tamb√©m
//                        boolean hibernateOk = testHibernateConnection();
//
//                        if (hibernateOk) {
//                            System.out.println("‚úÖ [Hibernate] Conex√£o validada com sucesso!");
//                            new ScreenLogin().setVisible(true);
//                        } else {
//                            JOptionPane.showMessageDialog(null,
//                                    "Hibernate n√£o conseguiu conectar. Usando fallback para JDBC.",
//                                    "Aviso", JOptionPane.WARNING_MESSAGE);
//                            // Fallback para seu sistema atual
//                            try (var conn = DatabaseProvider.getConnection()) {
//                                new ScreenLogin().setVisible(true);
//                            } catch (Exception e) {
//                                JOptionPane.showMessageDialog(null, "Erro ao conectar: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
//                                System.exit(1);
//                            }
//                        }
//                    }
//                }
//
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Erro inesperado: " + e.getMessage(), "Erro Fatal", JOptionPane.ERROR_MESSAGE);
//                e.printStackTrace();
//                System.exit(1);
//            }
//        });
//
//        // Shutdown hook para fechar Hibernate adequadamente
//        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
//            System.out.println("üîÑ Encerrando aplica√ß√£o...");
//            HibernateConfig.shutdown();
//        }));
//    }
//
//    private static boolean testHibernateConnection() {
//        try {
//            return HibernateConfig.testConnection();
//        } catch (Exception e) {
//            System.err.println("‚ùå Hibernate connection test failed: " + e.getMessage());
//            return false;
//        }
//    }
//}
