package com.okutonda.okudpdv.controllers;

import com.okutonda.okudpdv.data.dao.PaymentDao;
import com.okutonda.okudpdv.data.entities.Payment;
import java.time.LocalDate;
import java.util.List;

/**
 * Controller respons√°vel pela l√≥gica de alto n√≠vel dos pagamentos.
 *
 * Atua como intermedi√°rio entre a interface e o DAO, seguindo o padr√£o de
 * arquitetura baseado em BaseDao + DatabaseProvider.
 *
 * Fornece m√©todos para CRUD, filtragem e relat√≥rios.
 *
 * @author ‚Ä¶
 */
public class PaymentController {

    private final PaymentDao dao;

    public PaymentController() {
        this.dao = new PaymentDao();
    }

    // ==========================================================
    // üîπ CRUD
    // ==========================================================
    /**
     * Adiciona um novo pagamento vinculado a uma fatura/ordem.
     *
     * @param payment objeto Payment preenchido
     * @param invoiceId id da fatura ou ordem associada
     * @return true se inserido com sucesso
     */
    public boolean add(Payment payment, int invoiceId) {
        if (invoiceId <= 0 || payment == null) {
            System.err.println("[PaymentController] Falha ao adicionar: dados inv√°lidos.");
            return false;
        }
        return dao.add(payment, invoiceId);
    }

    /**
     * Atualiza um pagamento existente.
     *
     * @param payment objeto Payment com ID v√°lido
     * @return true se atualizado
     */
    public boolean edit(Payment payment) {
        if (payment == null || payment.getId() <= 0) {
            System.err.println("[PaymentController] Falha ao editar: ID inv√°lido.");
            return false;
        }
        return dao.update(payment);
    }

    /**
     * Exclui um pagamento pelo ID.
     *
     * @param id identificador do pagamento
     * @return true se exclu√≠do
     */
    public boolean delete(int id) {
        if (id <= 0) {
            System.err.println("[PaymentController] ID inv√°lido para exclus√£o.");
            return false;
        }
        return dao.delete(id);
    }

    // ==========================================================
    // üîπ CONSULTAS
    // ==========================================================
    /**
     * Obt√©m pagamento por ID.
     */
    public Payment getById(int id) {
        return dao.findById(id);
    }

    /**
     * Obt√©m pagamento pela refer√™ncia (ex: c√≥digo de transa√ß√£o).
     */
    public Payment getByReference(String ref) {
        return dao.findByReference(ref);
    }

    /**
     * Lista todos os pagamentos.
     */
    public List<Payment> getAll() {
        return dao.findAll();
    }

    /**
     * Lista pagamentos com cl√°usula WHERE customizada.
     */
    public List<Payment> get(String where) {
        return dao.list(where);
    }

    /**
     * Filtra pagamentos por texto (refer√™ncia, data, prefixo, descri√ß√£o, etc.).
     */
    public List<Payment> filter(String txt) {
        return dao.filter(txt);
    }

    /**
     * Filtra pagamentos entre duas datas (ex: para relat√≥rios financeiros).
     */
    public List<Payment> filterDate(LocalDate from, LocalDate to) {
        return dao.filterDate(from, to);
    }
}
