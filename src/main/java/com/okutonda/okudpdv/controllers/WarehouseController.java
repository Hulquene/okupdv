package com.okutonda.okudpdv.controllers;

import com.okutonda.okudpdv.data.dao.WarehouseDao;
import com.okutonda.okudpdv.data.entities.Warehouse;

import java.util.List;

/**
 * Controller respons√°vel pelas regras de neg√≥cio dos armaz√©ns (Warehouses).
 *
 * Camada intermedi√°ria entre a interface e o DAO. Realiza valida√ß√µes simples e
 * padroniza opera√ß√µes CRUD.
 *
 * @author Hulquene
 */
public class WarehouseController {

    private final WarehouseDao dao;

    public WarehouseController() {
        this.dao = new WarehouseDao();
    }

    // ==========================================================
    // üîπ CRUD
    // ==========================================================
    public boolean save(Warehouse warehouse) {
        if (warehouse == null) {
            System.err.println("[Controller] Armaz√©m inv√°lido (objeto nulo).");
            return false;
        }

        if (warehouse.getId() <= 0) {
            // Verifica duplicidade
            if (dao.existsByName(warehouse.getName())) {
                System.err.println("[Controller] J√° existe um armaz√©m com o nome informado.");
                return false;
            }
            return dao.add(warehouse);
        } else {
            return dao.update(warehouse);
        }
    }

    public boolean delete(int id) {
        if (id <= 0) {
            System.err.println("[Controller] ID inv√°lido para exclus√£o de armaz√©m.");
            return false;
        }
        return dao.delete(id);
    }

    // ==========================================================
    // üîπ Consultas
    // ==========================================================
    public Warehouse getById(int id) {
        return dao.findById(id);
    }

    public List<Warehouse> listarTodos() {
        return dao.findAll();
    }

    public List<Warehouse> filtrar(String texto) {
        return dao.filter(texto);
    }

    public List<Warehouse> listarAtivos() {
        return dao.findActive();
    }
}
