package com.okutonda.okudpdv.controllers;

import com.okutonda.okudpdv.data.dao.WarehouseDao;
import com.okutonda.okudpdv.data.entities.Warehouse;
import java.util.List;
import java.util.Optional;

/**
 * Controller respons√°vel pelas regras de neg√≥cio dos armaz√©ns (Warehouses) com
 * Hibernate.
 *
 * Camada intermedi√°ria entre a interface e o DAO. Realiza valida√ß√µes simples e
 * padroniza opera√ß√µes CRUD.
 *
 * @author Hulquene
 */
public class WarehouseController {

    private final WarehouseDao dao;

    public WarehouseController() {
        this.dao = new WarehouseDao();
    }

    // ==========================================================
    // üîπ CRUD
    // ==========================================================
    public Warehouse save(Warehouse warehouse) {
        if (warehouse == null) {
            System.err.println("‚ùå Armaz√©m inv√°lido (objeto nulo).");
            return null;
        }

        try {
            Warehouse savedWarehouse;

            if (warehouse.getId() == null || warehouse.getId() <= 0) {
                // Verifica duplicidade
                if (dao.existsByName(warehouse.getName())) {
                    System.err.println("‚ùå J√° existe um armaz√©m com o nome informado: " + warehouse.getName());
                    return null;
                }

                savedWarehouse = dao.save(warehouse);
            } else {
                savedWarehouse = dao.update(warehouse);
            }

            System.out.println("‚úÖ Armaz√©m salvo: " + savedWarehouse.getName());
            return savedWarehouse;

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao salvar armaz√©m: " + e.getMessage());
            return null;
        }
    }

    public boolean delete(Integer id) {
        if (id == null || id <= 0) {
            System.err.println("‚ùå ID inv√°lido para exclus√£o de armaz√©m.");
            return false;
        }

        try {
            dao.delete(id);
            System.out.println("‚úÖ Armaz√©m removido ID: " + id);
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao remover armaz√©m: " + e.getMessage());
            return false;
        }
    }

    // ==========================================================
    // üîπ Consultas
    // ==========================================================
    public Warehouse getById(Integer id) {
        Optional<Warehouse> warehouseOpt = dao.findById(id);
        return warehouseOpt.orElse(null);
    }

    public List<Warehouse> listarTodos() {
        try {
            return dao.findAll();
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao buscar armaz√©ns: " + e.getMessage());
            return List.of();
        }
    }

    public List<Warehouse> filtrar(String texto) {
        try {
            return dao.filter(texto);
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao filtrar armaz√©ns: " + e.getMessage());
            return List.of();
        }
    }

    public List<Warehouse> listarAtivos() {
        try {
            return dao.findActive();
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao buscar armaz√©ns ativos: " + e.getMessage());
            return List.of();
        }
    }

    // ==========================================================
    // üîπ M√©todos Adicionais
    // ==========================================================
    /**
     * Ativa/desativa um armaz√©m
     */
    public boolean toggleWarehouseStatus(Integer id) {
        try {
            boolean success = dao.toggleWarehouseStatus(id);
            if (success) {
                System.out.println("‚úÖ Status do armaz√©m atualizado: " + id);
            }
            return success;
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao alterar status do armaz√©m: " + e.getMessage());
            return false;
        }
    }

    /**
     * Busca armaz√©ns por localiza√ß√£o
     */
    public List<Warehouse> findByLocation(String location) {
        try {
            return dao.findByLocation(location);
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao buscar armaz√©ns por localiza√ß√£o: " + e.getMessage());
            return List.of();
        }
    }

    /**
     * Verifica se nome j√° existe
     */
    public boolean nameExists(String name) {
        return dao.existsByName(name);
    }

    /**
     * Valida dados do armaz√©m
     */
    public boolean validateWarehouse(Warehouse warehouse) {
        if (warehouse == null) {
            return false;
        }

        if (warehouse.getName() == null || warehouse.getName().trim().isEmpty()) {
            System.err.println("‚ùå Nome do armaz√©m √© obrigat√≥rio");
            return false;
        }

        if (warehouse.getName().length() > 100) {
            System.err.println("‚ùå Nome muito longo (m√°ximo 100 caracteres)");
            return false;
        }

        if (warehouse.getLocation() != null && warehouse.getLocation().length() > 200) {
            System.err.println("‚ùå Localiza√ß√£o muito longa (m√°ximo 200 caracteres)");
            return false;
        }

        return true;
    }
}
