package com.okutonda.okudpdv.controllers;

import com.okutonda.okudpdv.data.dao.CountryDao;
import com.okutonda.okudpdv.data.entities.Countries;
import java.util.List;
import java.util.Optional;

/**
 * Controller para gest√£o de pa√≠ses
 */
public class CountryController {

    private final CountryDao dao;

    public CountryController() {
        this.dao = new CountryDao();
    }

    // ==========================================================
    // üîπ CRUD
    // ==========================================================
    public Countries save(Countries country) {
        if (country == null) {
            System.err.println("‚ùå Pa√≠s n√£o pode ser nulo");
            return null;
        }

        try {
            // Valida√ß√µes
            if (!validarCountry(country)) {
                return null;
            }

            // CORRE√á√ÉO: Verifica se √© novo (id = 0) ou existente (id > 0)
            if (country.getId() == 0) {
                return dao.save(country);
            } else {
                return dao.update(country);
            }

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao salvar pa√≠s: " + e.getMessage());
            return null;
        }
    }

    public boolean delete(Integer id) {
        if (id == null || id <= 0) {
            System.err.println("‚ùå ID inv√°lido para exclus√£o");
            return false;
        }

        try {
            dao.delete(id);
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao excluir pa√≠s: " + e.getMessage());
            return false;
        }
    }

    // ==========================================================
    // üîπ Consultas
    // ==========================================================
    public Countries getById(Integer id) {
        Optional<Countries> country = dao.findById(id);
        return country.orElse(null);
    }

    public List<Countries> getAll() {
        try {
            return dao.findAll();
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao buscar pa√≠ses: " + e.getMessage());
            return List.of();
        }
    }

    public Countries getByIso2(String iso2) {
        Optional<Countries> country = dao.findByIso2(iso2);
        return country.orElse(null);
    }

    public Countries getByIso3(String iso3) {
        Optional<Countries> country = dao.findByIso3(iso3);
        return country.orElse(null);
    }

    public Countries getByName(String name) {
        Optional<Countries> country = dao.findByName(name);
        return country.orElse(null);
    }

    public List<Countries> filter(String text) {
        try {
            return dao.filter(text);
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao filtrar pa√≠ses: " + e.getMessage());
            return List.of();
        }
    }

    public List<Countries> getCommonCountries() {
        try {
            return dao.findCommonCountries();
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao buscar pa√≠ses comuns: " + e.getMessage());
            return List.of();
        }
    }

    public List<Countries> getUnMemberCountries() {
        try {
            return dao.findUnMemberCountries();
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao buscar pa√≠ses da ONU: " + e.getMessage());
            return List.of();
        }
    }

    // ==========================================================
    // üîπ Valida√ß√µes
    // ==========================================================
    private boolean validarCountry(Countries country) {
        if (country.getIso2() == null || country.getIso2().length() != 2) {
            System.err.println("‚ùå ISO2 deve ter 2 caracteres");
            return false;
        }

        if (country.getIso3() == null || country.getIso3().length() != 3) {
            System.err.println("‚ùå ISO3 deve ter 3 caracteres");
            return false;
        }

        if (country.getLong_name() == null || country.getLong_name().trim().isEmpty()) {
            System.err.println("‚ùå Nome longo √© obrigat√≥rio");
            return false;
        }

        // CORRE√á√ÉO: Verificar duplicatas apenas para novos registros (id = 0)
        if (country.getId() == 0) {
            if (dao.existsByIso2(country.getIso2())) {
                System.err.println("‚ùå ISO2 j√° existe: " + country.getIso2());
                return false;
            }
            if (dao.existsByIso3(country.getIso3())) {
                System.err.println("‚ùå ISO3 j√° existe: " + country.getIso3());
                return false;
            }
        }

        return true;
    }

    /**
     * Verifica se um pa√≠s existe pelo ISO2
     */
    public boolean existsByIso2(String iso2) {
        return dao.existsByIso2(iso2);
    }

    /**
     * Busca pa√≠s por c√≥digo de telefone
     */
    public Countries getByCallingCode(String callingCode) {
        List<Countries> countries = dao.findByCallingCode(callingCode);
        return countries.isEmpty() ? null : countries.get(0);
    }
}
